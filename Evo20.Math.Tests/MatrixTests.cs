using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Evo20.Math.Tests
{
    [TestClass]
    public class MatrixTests
    {
        [TestMethod]
        public void Transpose_CorrectMatrix_Transposed()
        {
            var testMatrix = new[]
            {
                new[] {1, 0.001514617, 0.041224963, 0.000692487},
                new[] {1, 0.001511852, 0.041230287, 0.000698511},
                new[] {1, 0.001519228, 0.041221091, 0.000697962},
                new[] {1, 0.001525944, 0.041229624, 0.000697654},
                new[] {1, 0.001519112, 0.041221233, 0.000695516},
                new[] {1, 0.001529195, 0.041230677, 0.000698093},
                new[] {1, 0.001523981, 0.041229313, 0.000705972},
                new[] {1, 0.00151074, 0.041222127, 0.000704023},
                new[] {1, 0.001504573, 0.041234232, 0.00071088},
                new[] {1, 0.001506762, 0.041232977, 0.000701833},
                new[] {1, 0.001502421, 0.041228495, 0.000711149},
                new[] {1, 0.001508562, 0.041230616, 0.000691674},
                new[] {1, 0.001502162, 0.041232187, 0.000704754},
                new[] {1, 0.00150467, 0.041227608, 0.000709712},
                new[] {1, 0.001507368, 0.041233016, 0.000704365},
                new[] {1, 0.001514462, 0.04123052, 0.000697819},
                new[] {1, 0.001510351, 0.041230211, 0.00068747},
                new[] {1, 0.001515946, 0.041228545, 0.000711781},
                new[] {1, 0.00150646, 0.04122812, 0.000708392},
                new[] {1, 0.001510948, 0.041232811, 0.00069941},
                new[] {1, 0.001506822, 0.041233342, 0.000701111},
                new[] {1, 0.00150765, 0.04122779, 0.000697367},
                new[] {1, 0.001512178, 0.041234654, 0.000700436},
                new[] {1, 0.001511332, 0.041231724, 0.000709358},
                new[] {1, 0.001511483, 0.041233621, 0.000704921},
                new[] {1, 0.001508484, 0.041235176, 0.000708715},
                new[] {1, 0.001511663, 0.04123951, 0.000705715},
                new[] {1, 0.001511791, 0.041233017, 0.000706388},
                new[] {1, 0.001510786, 0.041238972, 0.000700007},
                new[] {1, 0.001514463, 0.041228209, 0.000705676},
                new[] {1, 0.001506483, 0.041223239, 0.000693929},
                new[] {1, 0.001506884, 0.041233504, 0.000694489},
                new[] {1, 0.001507802, 0.041232365, 0.000708645},
                new[] {1, 0.001508491, 0.041229436, 0.000704978},
                new[] {1, 0.001504569, 0.041221811, 0.000705013},
                new[] {1, 0.001502085, 0.041228754, 0.000705741},
                new[] {1, 0.001510783, 0.041236383, 0.000698818},
                new[] {1, 0.001507575, 0.041233801, 0.000698473},
                new[] {1, 0.001513605, 0.041234339, 0.000691129},
                new[] {1, 0.001506453, 0.041237151, 0.000694209},
                new[] {1, 0.001515155, 0.041230592, 0.000711079},
                new[] {1, 0.001503252, 0.041237822, 0.00069494},
                new[] {1, 0.001506383, 0.041224975, 0.000697217},
                new[] {1, 0.001507413, 0.04123246, 0.000703204},
                new[] {1, 0.001505914, 0.041241641, 0.000700342},
                new[] {1, 0.001505588, 0.041235046, 0.000691785},
                new[] {1, 0.001498904, 0.041236915, 0.000695437},
                new[] {1, 0.001507378, 0.041237202, 0.000701285},
                new[] {1, 0.001504451, 0.041238204, 0.000698079},
                new[] {1, 0.001508158, 0.041235298, 0.000694824},
                new[] {1, 0.001511124, 0.041236489, 0.000707557},
                new[] {1, 0.001519308, 0.041241566, 0.000706405},
                new[] {1, 0.001505805, 0.04123573, 0.000703969},
                new[] {1, 0.001511115, 0.0412407, 0.000702185},
                new[] {1, 0.001517014, 0.041232295, 0.000704706},
                new[] {1, 0.001517423, 0.041235838, 0.000714948},
                new[] {1, 0.001514827, 0.041230341, 0.000706648},
                new[] {1, 0.001511245, 0.041227143, 0.000697455},
                new[] {1, 0.001516522, 0.041232063, 0.000698763},
                new[] {1, 0.001517871, 0.041236705, 0.000698685},
                new[] {1, 0.001515548, 0.041234768, 0.000688486},
                new[] {1, 0.00152115, 0.04124174, 0.000699308},
                new[] {1, 0.001508581, 0.04122967, 0.000700346},
                new[] {1, 0.001515339, 0.041238837, 0.000699954},
                new[] {1, 0.0015131, 0.041249421, 0.000697258},
                new[] {1, 0.001516544, 0.041236985, 0.000704364},
                new[] {1, 0.001512148, 0.041245288, 0.000695847},
                new[] {1, 0.001516427, 0.041237314, 0.000695351},
                new[] {1, 0.001507034, 0.041240832, 0.000688063},
                new[] {1, 0.00151031, 0.041238601, 0.000703522},
                new[] {1, 0.001502587, 0.041233984, 0.000699248},
                new[] {1, 0.001508637, 0.041243435, 0.000691392}
            };
            var etalonDoubles = new[]
            {
                new double []
                {
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1
                },
                new[]
                {
                    0.001514617, 0.001511852, 0.001519228, 0.001525944, 0.001519112, 0.001529195, 0.001523981,
                    0.00151074, 0.001504573, 0.001506762, 0.001502421, 0.001508562, 0.001502162, 0.00150467,
                    0.001507368, 0.001514462, 0.001510351, 0.001515946, 0.00150646, 0.001510948, 0.001506822,
                    0.00150765, 0.001512178, 0.001511332, 0.001511483, 0.001508484, 0.001511663, 0.001511791,
                    0.001510786, 0.001514463, 0.001506483, 0.001506884, 0.001507802, 0.001508491, 0.001504569,
                    0.001502085, 0.001510783, 0.001507575, 0.001513605, 0.001506453, 0.001515155, 0.001503252,
                    0.001506383, 0.001507413, 0.001505914, 0.001505588, 0.001498904, 0.001507378, 0.001504451,
                    0.001508158, 0.001511124, 0.001519308, 0.001505805, 0.001511115, 0.001517014, 0.001517423,
                    0.001514827, 0.001511245, 0.001516522, 0.001517871, 0.001515548, 0.00152115, 0.001508581,
                    0.001515339, 0.0015131, 0.001516544, 0.001512148, 0.001516427, 0.001507034, 0.00151031, 0.001502587,
                    0.001508637
                },
                new[]
                {
                    0.041224963, 0.041230287, 0.041221091, 0.041229624, 0.041221233, 0.041230677, 0.041229313,
                    0.041222127, 0.041234232, 0.041232977, 0.041228495, 0.041230616, 0.041232187, 0.041227608,
                    0.041233016, 0.04123052, 0.041230211, 0.041228545, 0.04122812, 0.041232811, 0.041233342, 0.04122779,
                    0.041234654, 0.041231724, 0.041233621, 0.041235176, 0.04123951, 0.041233017, 0.041238972,
                    0.041228209, 0.041223239, 0.041233504, 0.041232365, 0.041229436, 0.041221811, 0.041228754,
                    0.041236383, 0.041233801, 0.041234339, 0.041237151, 0.041230592, 0.041237822, 0.041224975,
                    0.04123246, 0.041241641, 0.041235046, 0.041236915, 0.041237202, 0.041238204, 0.041235298,
                    0.041236489, 0.041241566, 0.04123573, 0.0412407, 0.041232295, 0.041235838, 0.041230341, 0.041227143,
                    0.041232063, 0.041236705, 0.041234768, 0.04124174, 0.04122967, 0.041238837, 0.041249421,
                    0.041236985, 0.041245288, 0.041237314, 0.041240832, 0.041238601, 0.041233984, 0.041243435
                },
                new[]
                {
                    0.000692487, 0.000698511, 0.000697962, 0.000697654, 0.000695516, 0.000698093, 0.000705972,
                    0.000704023, 0.00071088, 0.000701833, 0.000711149, 0.000691674, 0.000704754, 0.000709712,
                    0.000704365, 0.000697819, 0.00068747, 0.000711781, 0.000708392, 0.00069941, 0.000701111,
                    0.000697367, 0.000700436, 0.000709358, 0.000704921, 0.000708715, 0.000705715, 0.000706388,
                    0.000700007, 0.000705676, 0.000693929, 0.000694489, 0.000708645, 0.000704978, 0.000705013,
                    0.000705741, 0.000698818, 0.000698473, 0.000691129, 0.000694209, 0.000711079, 0.00069494,
                    0.000697217, 0.000703204, 0.000700342, 0.000691785, 0.000695437, 0.000701285, 0.000698079,
                    0.000694824, 0.000707557, 0.000706405, 0.000703969, 0.000702185, 0.000704706, 0.000714948,
                    0.000706648, 0.000697455, 0.000698763, 0.000698685, 0.000688486, 0.000699308, 0.000700346,
                    0.000699954, 0.000697258, 0.000704364, 0.000695847, 0.000695351, 0.000688063, 0.000703522,
                    0.000699248, 0.000691392
                }
            };

            var testResult = testMatrix.Transpose();

            AssertEquals(testResult, etalonDoubles);
        }

        [TestMethod]
        public void Invers_CorrectMatrix_Inverted()
        {
            var testMatrix = new[]
            {
                new[] {770408.7388, -1201409.853, -18596518.9, -2566061.553},
                new[] {-1201409.853, 415312589.3, 13906557.62, 730126.8967},
                new[] {-18596518.9, 13906557.62, 449549927.9, 55786398.59},
                new[] {-2566061.553, 730126.8967, 55786398.59, 377718052.4}
            };
            var etalonDoubles = new[]
            {
                new[] {71.99999926, 0.10878299,  2.968795322, 0.050457226},
                new[] {0.10878299 , 0.00016436 , 0.004485478, 7.62346E-05},
                new[] {2.968795322, 0.004485478, 0.122413138, 0.002080516},
                new[] {0.050457226, 7.62346E-05, 0.002080516, 3.53629E-05}
            };

            var testResult = testMatrix.Inverse();
            AssertEquals(testResult, etalonDoubles);
        }

        [TestMethod]
        public void Invers_CorrectMatrix_Inverted2()
        {
            var testMatrix = new[]
            {
                new [] {72         , 0.107095003, 2.971216648, 0.050501527},
                new [] {0.107095003, 0.000159297, 0.004419478, 7.51174E-05},
                new [] {2.971216648, 0.004419478, 0.122612895, 0.002084041},
                new [] {0.050501527, 7.51174E-05, 0.002084041, 3.54233E-05 }
            };
            var etalonDoubles = new[]
            {
                new[] {1728369.755, -16867095.63, -41308095.73, 1961564.565},
                new[] {-16867095.66, 1199804494, 363289235.3, 129239627.7},
                new[] {-41308095.73, 363289234.5, 989071945.6, -68722669.2},
                new[] {1961564.577, 129239627.6, -68722669.49, 972572010.3}
            };

            var testResult = testMatrix.Inverse();
            var ts = testMatrix.Inverse1();
            AssertEquals(testResult, etalonDoubles);
        }

        [TestMethod]
        public void Invers_CorrectMatrix_Inverted5()
        {
            var testMatrix = new[]
            {
                new double[] {10, -9, -12},
                new double[] {7, -12, 11},
                new double[] {-10, 10, 3}
            };
            var etalonDoubles = new[]
            {
                new[] {1728369.755, -16867095.63, -41308095.73, 1961564.565},
                new[] {-16867095.66, 1199804494, 363289235.3, 129239627.7},
                new[] {-41308095.73, 363289234.5, 989071945.6, -68722669.2},
                new[] {1961564.577, 129239627.6, -68722669.49, 972572010.3}
            };

            var testResult = testMatrix.Inverse();
            var ts = testMatrix.Inverse1();
            AssertEquals(testResult, etalonDoubles);
        }

        [TestMethod]
        public void Invers_CorrectMatrix_Inverted3()
        {
            var testMatrix = new[]
            {
                 new[] {72         , 0.096611939, 2.976301051, 0.043272646 } ,
                 new[] {0.096611939, 0.000129639, 0.003993696, 5.80643E-05 } ,
                 new[] {2.976301051, 0.003993696, 0.123032889, 0.001788784 } ,
                 new[] {0.043272646, 5.80643E-05, 0.001788784, 2.60077E-05 }          
            };         
            var etalonDoubles = new[]
            {
                new[] {773906.6402, -16105723.87, -18301237.68, 7292083.812},
                new[] {-16105723.87, 642539748.3, 366636052.1, 79842260.9},
                new[] {-18301237.69, 366636052.1, 433713536.2, -201498111.4},
                new[] {7292083.818, 79842260.78, -201498111.6, 1490048248}
            };

            var testResult = testMatrix.Inverse();
            var file = new StreamWriter("matr.txt");
            CalculatorCoefficients.WriteMatrix(testMatrix, ref file);
            CalculatorCoefficients.WriteMatrix(testResult, ref file);
            CalculatorCoefficients.WriteMatrix(Matrix.Multiply(testMatrix, testResult), ref file);
            CalculatorCoefficients.WriteMatrix(Matrix.Multiply(testResult, testMatrix), ref file);
            file.Close();
            AssertEquals(testResult, etalonDoubles);
        }

        [TestMethod]
        public void Invers_OneMatrix_Inverted()
        {
            var testMatrix = new double[][]
            {
                new double [] {1,0,0,0},
                new double [] {0,1,0,0},
                new double [] {0,0,1,0},
                new double [] {0,0,0,1}
            };

            var testResult = testMatrix.Inverse();
            AssertEquals(testResult, testMatrix);
        }

        [TestMethod]
        public void Invers_OneMatrix_Inverted4()
        {
            var testMatrix = new []
            {
                new[]{39,0.001838853,0.000692773,0.000393641,8.67123E-08,1.23173E-08,3.9866E-09,4.08946E-12,2.19198E-13,4.05131E-14,1.92886E-16,3.90436E-18,4.13145E-19},
                new[]{0.001838853,8.67123E-08,3.2665E-08,1.85616E-08,4.08946E-12,5.80789E-13,1.87998E-13,1.92886E-16,1.0336E-17,1.91066E-18,9.09882E-21,1.84111E-22,1.94864E-23},
                new[]{0.000692773,3.2665E-08,1.23173E-08,6.99549E-09,1.54037E-12,2.19198E-13,7.08788E-14,7.26475E-17,3.90436E-18,7.20625E-19,3.42662E-21,6.96077E-23,7.35226E-24},
                new[]{0.000393641,1.85616E-08,6.99549E-09,3.9866E-09,8.7535E-13,1.24432E-13,4.05131E-14,4.12856E-17,2.21535E-18,4.13145E-19,1.94745E-21,3.94772E-23,4.22811E-24},
                new[]{8.67123E-08,4.08946E-12,1.54037E-12,8.7535E-13,1.92886E-16,2.73888E-17,8.86654E-18,9.09882E-21,4.87438E-22,9.01203E-23,4.29258E-25,8.68286E-27,9.19201E-28},
                new[]{1.23173E-08,5.80789E-13,2.19198E-13,1.24432E-13,2.73888E-17,3.90436E-18,1.26132E-18,1.29175E-21,6.96077E-23,1.28297E-23,6.09307E-26,1.24209E-27,1.30958E-28},
                new[]{3.9866E-09,1.87998E-13,7.08788E-14,4.05131E-14,8.86654E-18,1.26132E-18,4.13145E-19,4.18222E-22,2.24662E-23,4.22811E-24,1.97293E-26,4.0052E-28,4.34258E-29},
                new[]{4.08946E-12,1.92886E-16,7.26475E-17,4.12856E-17,9.09882E-21,1.29175E-21,4.18222E-22,4.29258E-25,2.299E-26,4.25122E-27,2.02536E-29,4.09541E-31,4.33653E-32},
                new[]{2.19198E-13,1.0336E-17,3.90436E-18,2.21535E-18,4.87438E-22,6.96077E-23,2.24662E-23,2.299E-26,1.24209E-27,2.28622E-28,1.08445E-30,2.2184E-32,2.33472E-33},
                new[]{4.05131E-14,1.91066E-18,7.20625E-19,4.13145E-19,9.01203E-23,1.28297E-23,4.22811E-24,4.25122E-27,2.28622E-28,4.34258E-29,2.00565E-31,4.07765E-33,4.47638E-34},
                new[]{1.92886E-16,9.09882E-21,3.42662E-21,1.94745E-21,4.29258E-25,6.09307E-26,1.97293E-26,2.02536E-29,1.08445E-30,2.00565E-31,9.55723E-34,1.9319E-35,2.04609E-36},
                new[]{3.90436E-18,1.84111E-22,6.96077E-23,3.94772E-23,8.68286E-27,1.24209E-27,4.0052E-28,4.09541E-31,2.2184E-32,4.07765E-33,1.9319E-35,3.96564E-37,4.16606E-38},
                new[]{4.13145E-19,1.94864E-23,7.35226E-24,4.22811E-24,9.19201E-28,1.30958E-28,4.34258E-29,4.33653E-32,2.33472E-33,4.47638E-34,2.04609E-36,4.16606E-38,4.63126E-39}
            };
            var etalonDoubles = new []
            {
                new [] {-2.17724E+12,1.82686E+17,9.05021E+15,5.47755E+13,-5.85479E+21,-7.73119E+20,-7.98256E+18,8.33853E+25,2.93288E+25,5.17237E+23,-4.45302E+29,-4.1689E+29,-1.25774E+28      } ,
                new [] {1.83235E+17,-1.52411E+22,-1.09661E+21,5.03024E+18,4.88121E+26,9.37137E+25,-7.4061E+23,-6.9472E+30,-3.55645E+30,4.8097E+28,3.70748E+34,5.05723E+34,-1.16227E+33         } ,
                new [] {7.65137E+15,-9.76979E+20,8.23108E+20,-2.67013E+19,3.19727E+25,-7.04E+25,3.9163E+24,-4.64811E+29,2.67398E+30,-2.5436E+29,2.53278E+33,-3.80567E+34,6.17283E+33          } ,
                new [] {9.45E+13,1.70E+18,-2.68844E+19,7.14044E+18,-9.49667E+22,2.30083E+24,-1.0533E+24,1.92492E+27,-8.74439E+28,6.88556E+28,-1.33184E+31,1.24524E+33,-1.6831E+33              } ,
                new [] {-5.87346E+21,4.88212E+26,3.58104E+25,-2.01599E+23,-1.56328E+31,-3.0604E+30,2.96461E+28,2.22452E+35,1.16148E+35,-1.92464E+33,-1.18692E+39,-1.65169E+39,4.65359E+37      } ,
                new [] {-6.53477E+20,8.34819E+25,-7.04006E+25,2.28519E+24,-2.73218E+30,6.02155E+30,-3.35156E+29,3.97217E+34,-2.28723E+35,2.17671E+34,-2.16456E+38,3.25536E+39,-5.28224E+38     } ,
                new [] {-1.38103E+19,-2.52722E+23,3.9431E+24,-1.0533E+24,1.40154E+28,-3.37446E+29,1.55415E+29,-2.83375E+32,1.28242E+34,-1.01624E+34,1.95798E+36,-1.82614E+38,2.48477E+38       } ,
                new [] {8.36667E+25,-6.9498E+30,-5.1952E+29,3.44309E+27,2.22493E+35,4.44009E+34,-5.05915E+32,-3.16543E+39,-1.68517E+39,3.28368E+37,1.68863E+43,2.39651E+43,-7.9426E+41         } ,
                new [] {2.47845E+25,-3.16783E+30,2.67402E+30,-8.68502E+28,1.03682E+35,-2.28725E+35,1.27373E+34,-1.50745E+39,8.68822E+39,-8.27204E+38,8.21498E+42,-1.23662E+44,2.0073E+43       } ,
                new [] {8.95461E+23,1.6432E+28,-2.56098E+29,6.88555E+28,-9.10173E+32,2.19156E+34,-1.01624E+34,1.83934E+37,-8.32839E+38,6.64691E+38,-1.27054E+41,1.1859E+43,-1.62563E+43        } ,
                new [] {-4.4687E+29,3.70956E+34,2.82523E+33,-2.1423E+31,-1.18736E+39,-2.41468E+38,3.14601E+36,1.68894E+43,9.16498E+42,-2.0416E+41,-9.00806E+46,-1.30342E+47,4.93954E+45       } ,
                new [] {-3.52214E+29,4.50415E+34,-3.80576E+34,1.2368E+33,-1.47427E+39,3.25542E+39,-1.81379E+38,2.14358E+43,-1.23663E+44,1.17789E+43,-1.16822E+47,1.7602E+48,-2.85815E+47       } ,
                new [] { -2.17483E+28,-3.94479E+32,6.21497E+33,-1.6831E+33,2.19378E+37,-5.31825E+38,2.48476E+38,-4.44046E+41,2.02096E+43,-1.62563E+43,3.06993E+45,-2.87758E+47,3.97684E+47 }
            };
            var testResult = testMatrix.Inverse();
            var t2 = testResult.ToArray();
            AssertEquals(testResult, etalonDoubles);
        }
        [TestMethod]
        public void Multiply_CorrectMatrix_Multiplyed()
        {
            var first = new[]
            {
                new[] {770408.7388, -1201409.853, -18596518.9, -2566061.553},
                new[] {-1201409.853, 415312589.3, 13906557.62, 730126.8967},
                new[] {-18596518.9, 13906557.62, 449549927.9, 55786398.59},
                new[] {-2566061.553, 730126.8967, 55786398.59, 377718052.4}  

            };
            var second = new[]
            {
                new[] {2.84217E-14, -1.40037E-14, 5.77316E-15},
                new[] {3.97185E-05, 0.000590964, 3.01476E-05},
                new[] {-1.35806E-05, 0.00016595, 0.000141503},
                new[] {-4.04457E-05, -0.000186737, -0.000214374}
            };

            var etalonDoubles = new[]
            {
                new[] {308.619302, -3316.897338, -2117.591694},
                new[] {16277.21413, 247606.4301, 14331.99457},
                new[] {-7809.117411, 72403.54171, 52072.89772},
                new[] {-16005.68142, -60844.75973, -73056.96864}  
            };

            var testResult = Matrix.Multiply(first, second);
            var t2 = testResult.ToArray();
            AssertEquals(testResult, etalonDoubles);
        }

        public static void AssertEquals(double[][] testResult, double[][] etalonDoubles,int numbersCount=0)
        {
            Assert.AreEqual(testResult.Length, etalonDoubles.Length);

            for (var i = 0; i < testResult.Length; i++)
            {
                Assert.AreEqual(testResult[i].Length, etalonDoubles[i].Length);
                for (var j = 0; j < testResult[i].Length; j++)
                    Assert.AreEqual(System.Math.Round(testResult[i][j], numbersCount), System.Math.Round(etalonDoubles[i][j], numbersCount));
            }
        }
    }
}
